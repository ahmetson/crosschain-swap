Date: 23:05, 30th January, 2022 (GMT+3), Turkey, Tekirdag, Cherkezkoy.

Finished the Smartcontracts.

Let's work on the Ara MVP. To do that we will write a short documentation that explains the order of transaction calls.

There are four primary operations on Dex'es. Creating liquidity, Adding a liquidity, Removing liquidity and Swapping a token.
In xdex the execution of operation by client is called a process.

So, let's begin to explain the algorithm order of each process.

------------------------------------------------------------------
1. CREATE LIQUIDITY
------------------------------------------------------------------

Investor on the website chooses the network and the tokens that he wants to use to create a token.
The website checks does the token exist or not. If it exists, then the process is terminated.

Then, user switches to the Target blockchain with slow speed and high cost. If he wasn't on that blockchain.

User approves his token on Target blockchain.
Then he deposits the tokens to the TargetChain.sol smartcontract.

User waits for 12 blocks on the Target blockchain. 

Then he requests a signature from the Ara network.
User passes the following parameters:
    1. transaction id of deposit on target chain.
    2. source chain id.
    3. target chain id.
    4. source token address.
    5. target token address.
    6. source amount.

The Ara mvp does the following checkins:
- source chain id and target chain id are not the same.
- the chain pair of source chain and target chain exists.
- deposit transaction exists on target chain.
- it passed 12 blocks since the deposit.
- the source token exists on the source chain.
- the target token exists on the target chain.
- there is no pair created for source token and target token.

then, Ara mvp gets user's token amount and user's wallet address from the target blockchain.

And finally generates a signature that will be returned to the user as V,R,S, along with the wallet address and output tokens.

User gets the signature from the server. He then switches to the Source chain.

User calls approve. Then he calls factory.create().

DONE!!!


------------------------------------------------------------------
2. ADD LIQUIDITY
------------------------------------------------------------------

Investor on the website chooses the Pair. He then decides to add a token to the pair.

Investor switches to the Target blockchain.

He approves his tokens to be transferred by the Pair contract if it wasn't approved before.

Then user calls the Deposit function.

User waits for 12 blocks after successful transaction.

User gets Addition signature from the Ara MVP. User passes to Ara MVP the following parameters:
    1. Transaction id of the deposit.
    2. Source chain id.
    3. Target chain id.
    4. Pair address.
    5. Source amount.

The Ara MVP does the following validations:
- source chain id and target chain id are not the same.
- the chain pair of source chain and target chain exists.
- addition transaction exists on target chain.
- it passed 12 blocks since the addition.
- pair exists on the source chain.
- the "to" parameter of deposit transaction is the same address as pair.targetAddress.
- the amount ratio are valid.
- the transaction id was not used for previous data.

Then signature, user's wallet address and amount out from target chain are returned to the user.

User checks is the wallet address returned from the server is the same user. Otherwise throws an error.

He then switches to the Source network. He approves his tokens on the first blockchain. Then calls the Mint function of the pair.

Done!!!


------------------------------------------------------------------
3. REMOVE LIQUIDITY 
------------------------------------------------------------------

Investor on the website sets the amount of LP that he wants to remove.

He then switches to the source chain if he wasn't there.

Then investor calls the burn function of the pair.

Investor waits for 12 blocks. And Passes the data to the Ara MVP.
He passes the following parameters:
    1. Transaction id of the removal.
    2. Source chain id.
    3. Target chain id.
    4. Pair address.

The Ara MVP does the following validations:
- source chain id and target chain id are not the same.
- the chain pair of source chain and target chain exists.
- removal transaction exists on target chain.
- it passed 12 blocks since the removal.
- pair exists on the source chain.
- the transaction id was not used for previous data.

Then Ara MVP signs the signature and returns to the user the following parameters:
signature, wallet address, amount to withdraw on source chain, amount to withdraw on target chain.

User upon server response checks whether the wallet address is his address. If not, then process is halted.

Then user switches to the Target chain.
Then user calls withdraw function on the TargetChain contract.

Done!!!


------------------------------------------------------------------
4. SWAP
------------------------------------------------------------------

User is on the website chooses the tokens that he wants to swap.

Then the website calculates the amount that user can swap. The interface calculates the Amount ins for the user.

a) swapping from target chain to source chain
If user swaps the token on the target chain to the token on the source chain, then
user switches to the target blockchain if he didn't on target chain yet.

Then user calls the deposit function of the TargetChain.

After successful transaction confirmation, user waits for 12 blocks confirmation.
Then sends the data to Ara MVP to sign the signature.

User sends the following parameters:
    1. Transaction id of the deposit.
    2. Source chain id.
    3. Target chain id.
    4. Pair address.
    5. type of swap as 'TargetToSource'.
    6. amount to swap out on source chain.

The Ara MVP does the following validations:
- source chain id and target chain id are not the same.
- the chain pair of source chain and target chain exists.
- deposit transaction exists on target chain.
- it passed 12 blocks since the deposit.
- pair exists on the source chain.
- the transaction id was not used for previous data.
- the deposited token is the targetToken of the pair token.
- amounts are adjusted. (Pair.sol -> swap)
        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');
    check that amount to swap out on source chain + amount in deposited on target chain adjusted.

Then Ara MVP creates a signature. The server returns to the client the following parameters:
signature, source token amount out, target token amount out, wallet address, pair.

User checks is the wallet address is his wallet address. If not then the process is halted.

Then user switches to the source chain.

And calls the swap function with the signature.

Done!!!

b) swapping from source chain to target chain
user switches to the source chain if he wasn't on source chain yet.

User sends the following parameters to the Ara MVP:
    1. Source chain id.
    2. Target chain id.
    3. Pair address.
    4. type of swap as 'SourceToTarget'.
    5. amount to swap out on source chain.
    6. amount to swap in on target chain.

The Ara MVP does the following validations:
- source chain id and target chain id are not the same.
- the chain pair of source chain and target chain exists.
- pair exists on the source chain.
- amounts are adjusted. (Pair.sol -> swap)
        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');
    check that amount to swap to swap in on source chain + amount to swap out on target chain adjusted.

Then Ara MVP creates a signature. The server returns to the client the following parameters:
signature, source token amount out, target token amount out, wallet address, pair.

User checks is the wallet address is his wallet address. If not then the process is halted.

Then user switches to the source chain.

And calls the swap function with the signature.

After transaction confirmation, user waits for 12 blocks and sends the data to the server again.

He passes the following parameters:
    1. Transaction id of swap.
    2. Source chain id.
    3. Target chain id.
    4. Pair address.
    5. type of swap as 'SwapTargetWithdraw'

The Ara MVP does the following validations:
- source chain id and target chain id are not the same.
- the chain pair of source chain and target chain exists.
- removal transaction exists on target chain.
- it passed 12 blocks since the removal.
- pair exists on the source chain.
- the transaction id was not used for previous data.

Then server returns the wallet address, signature, amount out on target blockchain and the target token.

User switches to the target blockchain if he didn't do it yet.
Then calls the withdraw function of TargetChain contract.

Done!!!


--------------------------------------------------------
Double Spending prevention [Optional, for production mode]
[NEED MORE RESEARCH]
--------------------------------------------------------
Ara MVP has a txid, chain id, nonce, wallet, nonce type, amount 0, amount 1, status, table.
Here the txid, chain id are paired unique key.
nonce type, nonce, wallet and chain id is also a paired unique key.

whenever a signature is generated, are blockchain inserts the row into the table with 'status' set to false.
ofcoure is the transaction and chain exists, and the 'status' is true, then ara won't insert, yet will halt the signature generation.

then, ara MVP listens to target chain, pairs, factory on both blockchains. 
upon receiving the data, ara chain updates the 'status' in the table.


--------------------------------------------------------
Ara MVP JSON api
--------------------------------------------------------

POST /create-sig 
POST /add-sig 
POST /remove-sig 
POST /swap-sig/source-2-target
POST /swap-sig/target-2-source
POST /swap-sig/withdraw-from-target


